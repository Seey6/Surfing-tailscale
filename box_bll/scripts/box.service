#!/system/bin/sh

export PATH="/data/adb/magisk:/data/adb/ksu/bin:/data/adb/ap/bin:$PATH:/data/data/com.termux/files/usr/bin"

scripts=$(realpath "$0")
scripts_dir=$(dirname "$scripts")

source ${scripts_dir}/box.config

mkdir -p "${run_path}"
mkdir -p "${box_path}/${bin_name}/log"

# ${box_path}/bin/yq -i ".tproxy-port=${tproxy_port}" ${box_path}/clash/config.yaml
# ${box_path}/bin/yq -i ".dns.listen=\"${clash_dns_listen}\"" ${box_path}/clash/config.yaml
# ${box_path}/bin/yq -i ".dns.fake-ip-range=\"${clash_fake_ip_range}\"" ${box_path}/clash/config.yaml

# ${box_path}/bin/yq -o=json -i "(.inbounds[] | select(.type == \"tproxy\") | .listen_port) = ${tproxy_port}" ${box_path}/sing-box/config.json

find "${box_path}" -mtime +3 -type f -name "*.log" | xargs rm -f

log() {
TZ=Asia/Shanghai
now=$(date +"[%Y-%m-%d %H:%M:%S %Z]")
case $1 in
Info)
[ -t 1 ] && echo -e "\033[1;32m${now} [信息]: $2\033[0m" || echo "${now} [Info]: $2"
;;
Warn)
[ -t 1 ] && echo -e "\033[1;33m${now} [警告]: $2\033[0m" || echo "${now} [Warn]: $2"
;;
Error)
[ -t 1 ] && echo -e "\033[1;31m${now} [错误]: $2\033[0m" || echo "${now} [Error]: $2"
;;
*)
[ -t 1 ] && echo -e "\033[1;30m${now} [$1]: $2\033[0m" || echo "${now} [$1]: $2"
;;
esac
}

check_permission() {
  if which "${bin_name}" | grep -q "/system/bin/"; then
    box_user=$(echo "${box_user_group}" | awk -F ':' '{print $1}')
    box_group=$(echo "${box_user_group}" | awk -F ':' '{print $2}')
    box_user_id=$(id -u "${box_user}")
    box_group_id=$(id -g "${box_group}")
    
    [ "${box_user_id}" ] && [ "${box_group_id}" ] || {
      box_user_group="root:net_admin"
      log Error "用户组 ${box_user_group} 错误，使用 root:net_admin 代替."
    }
    
    bin_path=$(which "${bin_name}")
    chown "${box_user_group}" "${bin_path}"
    chmod 0755 "${bin_path}"
    
    chown -R "${box_user_group}" "${box_path}"
    return 0
  elif [ -f "${bin_path}" ]; then
    box_user_group="root:net_admin"
    chown "${box_user_group}" "${bin_path}"
    chmod 0700 "${bin_path}"
    chown -R "${box_user_group}" "${box_path}"
    return 0
  else
    return 1
  fi
}

start_bin() {
  ulimit -SHn 1000000
  case "${bin_name}" in
    sing-box)
      if "${bin_path}" check -D "${box_path}/${bin_name}" > "${run_path}/check.log" 2>&1; then
        log Info "正在启动 ${bin_name} 服务."
        nohup busybox setuidgid "${box_user_group}" "${bin_path}" run -D "${box_path}/${bin_name}" > /dev/null 2> "${run_path}/error_${bin_name}.log" &
        echo -n $! > "${pid_file}"
        return 0
      else
        log Error "配置检查失败，请检查 ${run_path}/check.log 文件."
        return 1
      fi
      ;;
    clash|mihomo)
      if "${bin_path}" -t -d "${box_path}/${bin_name}" > "${run_path}/check.log" 2>&1; then
        log Info "正在启动 ${bin_name} 服务."
        nohup busybox setuidgid "${box_user_group}" "${bin_path}" -d "${box_path}/${bin_name}" > "${box_path}/${bin_name}/log/${bin_name}_$(date +%Y%m%d%H%M).log" 2> "${run_path}/error_${bin_name}.log" &
        echo -n $! > "${pid_file}"
        return 0
      else
        log Error "配置检查失败，请检查 ${run_path}/check.log 文件."
        return 1
      fi
      ;;
    xray)
      export XRAY_LOCATION_ASSET="${box_path}/${bin_name}"
      if "${bin_path}" -test -confdir "${box_path}/${bin_name}" > "${run_path}/check.log" 2>&1; then
        log Info "正在启动 ${bin_name} 服务."
        nohup busybox setuidgid "${box_user_group}" "${bin_path}" -confdir "${box_path}/${bin_name}" > /dev/null 2> "${run_path}/error_${bin_name}.log" &
        echo -n $! > "${pid_file}"
        return 0
      else
        log Error "配置检查失败，请检查 ${run_path}/check.log 文件."
        return 1
      fi
      ;;
    v2ray)
      export V2RAY_LOCATION_ASSET="${box_path}/${bin_name}"
      if "${bin_path}" test -d "${box_path}/${bin_name}" > "${run_path}/check.log" 2>&1; then
        log Info "正在启动 ${bin_name} 服务."
        nohup busybox setuidgid "${box_user_group}" "${bin_path}" run -d "${box_path}/${bin_name}" > /dev/null 2> "${run_path}/error_${bin_name}.log" &
        echo -n $! > "${pid_file}"
        return 0
      else
        log Error "配置检查失败，请检查 ${run_path}/check.log 文件."
        return 1
      fi
      ;;
    hysteria)
      log Info "正在启动 ${bin_name} 服务."
      nohup busybox setuidgid "${box_user_group}" "${bin_path}" -c "${box_path}/${bin_name}/config.yaml" > "${box_path}/${bin_name}/${bin_name}_$(date +%Y%m%d%H%M).log" 2> "${run_path}/error_${bin_name}.log" &
      echo -n $! > "${pid_file}"
      return 0
      ;;
    *)
      log Error "错误: $1 核心错误，必须是 ${bin_name_list[*]} 之一."
      return 2
      ;;
  esac
}

find_netstat_path() {
  if [ -f /system/bin/ss ]; then
    alias netstat="/system/bin/ss"
    return 0
  
  elif [ -f /system/xbin/ss ]; then
    alias netstat="/system/xbin/ss"
    return 0
  
  elif command -v busybox >/dev/null 2>&1; then
    alias netstat="busybox netstat"
    return 0
  fi
  return 1
}

wait_bin_listen() {
  wait_count=0
  bin_pid=$(busybox pidof ${bin_name})
  find_netstat_path && \
  check_bin_cmd="netstat -tnulp | grep -q ${bin_name}" || \
  check_bin_cmd="ls -lh /proc/${bin_pid}/fd | grep -q socket"
  
  while [ ${bin_pid} ] && ! eval "${check_bin_cmd}" && [ ${wait_count} -lt 100 ]; do
    sleep 2
    wait_count=$((${wait_count} + 1))
  done

  if [ ${bin_pid} ] && eval "${check_bin_cmd}" ; then
    log Info "${bin_name} 已开始监听"
    return 0
  else
    return 1
  fi
}

display_run_time() {
  run_time=$(busybox ps -eo etime,comm | awk -v bin="${bin_name}" '$2==bin {print $1; exit}')

  if echo "$run_time" | grep -qE "^[0-9]+h[0-9]+m?$"; then
    formatted=$(echo "$run_time" | sed -E 's/([0-9]+)h([0-9]+)m?/\1时\2分/')
    echo "$formatted"
    return
  fi

  if echo "$run_time" | grep -qE "^[0-9]+d[0-9]+h?$"; then
    formatted=$(echo "$run_time" | sed -E 's/([0-9]+)d([0-9]+)h?/\1天\2时/')
    echo "$formatted"
    return
  fi

  if echo "$run_time" | grep -qE "^[0-9]+-[0-9]+:[0-9]+:[0-9]+$"; then
    days=$(echo "$run_time" | cut -d'-' -f1)
    time_part=$(echo "$run_time" | cut -d'-' -f2)
    IFS=':' read -r hours minutes _ <<< "$time_part"
    echo "${days}天${hours}时${minutes}分"
    return
  fi

  IFS=':' read -r a b c <<< "$run_time"
  if [ -z "$c" ]; then
    echo "${a}分钟"
  else
    echo "${a}时${b}分"
  fi
}

display_bin_status() {
  if bin_pid=$(busybox pidof "${bin_name}"); then
    log Info "${bin_name} 使用用户组: $(stat -c %U:%G /proc/${bin_pid})."
    log Info "${bin_name} 服务正在运行. ( PID: ${bin_pid} )"
    log Info "${bin_name} 内存使用: $(awk '/VmRSS/ {print $2$3}' /proc/${bin_pid}/status)"
    log Info "${bin_name} CPU 使用: $((/system/bin/ps -eo %CPU,NAME | grep ${bin_name} | awk '{print $1"%"}') 2>/dev/null || dumpsys cpuinfo | grep ${bin_name} | awk '{print $1}')"
    log Info "${bin_name} 服务已运行: $(display_run_time)"
    echo -n ${bin_pid} > "${pid_file}"
    return 0
  else
    log Warn "${bin_name} 服务已停止."
    return 1
  fi
}

start_tailscale() {
  if [ "${enable_tailscale}" = "true" ]; then
    if [ -f "${tailscale_bin_path}" ]; then
      log Info "正在启动 tailscaled 守护进程..."
      nohup busybox setuidgid "${box_user_group}" "${box_path}/bin/tailscaled" --state="${box_path}/tailscale/tailscaled.state" --socket="${box_path}/tailscale/tailscaled.sock" > "${run_path}/tailscaled.log" 2>&1 &
      
      # 等待守护进程启动并创建socket
      sleep 2

      log Info "正在激活 tailscale 连接..."
      nohup "${tailscale_bin_path}" --socket="${box_path}/tailscale/tailscaled.sock" up > "${run_path}/tailscale_up.log" 2>&1 &
      return 0
    else
      log Error "Tailscale 可执行文件未找到于 ${tailscale_bin_path}"
      return 1
    fi
  fi
}

stop_tailscale() {
  if [ "${enable_tailscale}" = "true" ]; then
    log Warn "正在停止 tailscaled 守护进程."
    killall tailscaled >> /dev/null 2>&1
  fi
}

start_service() {
  start_tailscale
  if check_permission; then
    log Info "${bin_name} 将以 ${box_user_group} 用户组启动."
    if start_bin; then
      log Info "${bin_name} 服务正在运行. ( PID: $(cat "${pid_file}") )"
      return 0
    else
      if bin_pid=$(pidof "${bin_name}"); then
        log Warn "${bin_name} 服务正在运行，但可能未在监听. ( PID: ${bin_pid} )"
        return 0
      else
        log Error "启动 ${bin_name} 服务失败，请检查 ${run_path}/error_${bin_name}.log 文件."
        rm -f "${pid_file}" >> /dev/null 2>&1
        return 1
      fi
    fi
  else
    log Error "缺少 ${bin_name} 核心，请下载并放置在 ${box_path}/bin/ 目录中."
    return 2
  fi
}

stop_service() {
  if display_bin_status; then
    log Warn "正在停止 ${bin_name} 服务."
    kill $(cat "${pid_file}") || killall "${bin_name}"
    sleep 1
    display_bin_status
  fi
  rm -f "${pid_file}" >> /dev/null 2>&1
  stop_tailscale
}

# create_tun_link() {
#   mkdir -p /dev/net
#   [ ! -L /dev/net/tun ] && ln -s /dev/tun /dev/net/tun
# }

probe_tun_device() {
  ifconfig | grep -q "${tun_device}" || return 1
}

probe_tun_index() {
  while [ ! -f "/data/misc/net/rt_tables" ]; do
    sleep 3
  done
  cat /data/misc/net/rt_tables | while read -r index name; do
    if [ "${name}" = "${tun_device}" ]; then
      tun_table_index=${index}
      return 0
    fi
  done
  return 1
}

tun_forward_ip_rules() {
  ip rule $1 iif lo goto 6000 pref 5000
  ip rule $1 iif "${tun_device}" lookup main suppress_prefixlength 0 pref 5010
  ip rule $1 iif "${tun_device}" goto 6000 pref 5020
  ip rule $1 from 10.0.0.0/8 lookup "${tun_table_index}" pref 5030
  ip rule $1 from 172.16.0.0/12 lookup "${tun_table_index}" pref 5040
  ip rule $1 from 192.168.0.0/16 lookup "${tun_table_index}" pref 5050
  ip rule $1 nop pref 6000
}

tun_forward_ip_rules_del() {
  ip rule del pref 5000
  ip rule del pref 5010
  ip rule del pref 5020
  ip rule del pref 5030
  ip rule del pref 5040
  ip rule del pref 5050
  ip rule del pref 6000
}

sing_tun_ip_rules() {
  ip rule $1 from all iif "${tun_device}" lookup main suppress_prefixlength 0 pref 8000
  ip rule $1 lookup main pref 7000
}

tun_forward_iptables_rules() {
  iptables -w 100 $1 FORWARD -o "${tun_device}" -j ACCEPT
  iptables -w 100 $1 FORWARD -i "${tun_device}" -j ACCEPT
  ip6tables -w 100 $1 FORWARD -o "${tun_device}" -j ACCEPT
  ip6tables -w 100 $1 FORWARD -i "${tun_device}" -j ACCEPT
}

tun_forward_enable() {
  tun_forward_disable
  ${scripts_dir}/box.tailscale disable
  sleep 1
  echo 1 > /proc/sys/net/ipv4/ip_forward
  echo 2 > /proc/sys/net/ipv4/conf/default/rp_filter
  echo 2 > /proc/sys/net/ipv4/conf/all/rp_filter

  probe_tun_index && tun_forward_ip_rules "add"
  probe_tun_device && tun_forward_iptables_rules "-I" && sing_tun_ip_rules "add" && log Info "Tun 热点支持已启用."
  
  # 为Tailscale添加策略路由以绕过Clash TUN
  ${scripts_dir}/box.tailscale enable

  return 0
}

tun_forward_disable() {
  sing_tun_ip_rules "del" >> /dev/null 2>&1
  tun_forward_ip_rules_del >> /dev/null 2>&1
  tun_forward_iptables_rules "-D" >> /dev/null 2>&1
  
  # 清理Tailscale的策略路由
  ${scripts_dir}/box.tailscale disable

  log Warn "Tun 热点支持已禁用."
}

case "$1" in
  start)
    display_bin_status || start_service
    if [ $? -eq 0 ]; then
      uptime_sec=$(cut -d. -f1 /proc/uptime)
      if [ "$uptime_sec" -lt 180 ]; then
        log Info "系统已重启，正在等待服务初始化..."
        sleep 5
      fi
      if wait_bin_listen; then
        tun_forward_enable
        ${scripts_dir}/box.tailscale enable
      fi
    fi
    ;;
  stop)
    stop_service
    tun_forward_disable
    ;;
  restart)
    stop_service
    sleep 2
    start_service
    sleep 2
    if wait_bin_listen; then
      tun_forward_enable
      ${scripts_dir}/box.tailscale enable
    fi
    ;;
  status)
    display_bin_status
    ;;
  *)
    log Error "$0 $1 用法: $0 {start|stop|restart|status}"
    exit 1
    ;;
esac